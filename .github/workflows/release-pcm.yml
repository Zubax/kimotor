
name: Release a PCM-compatible archive

on:
  # Run on new tag pushed
  push:
    tags:        
      - 'v*'
  # Run on release created online
  release:
    types:
      - created
  # Run manually
  workflow_dispatch:
  
env:
    GITHUB_TOKEN: ${{ secrets.token }}

jobs:
  pack:
    name: Create PCM archive
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3

      - name: Set env
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${{ github.event.repository.name }}-pcm.zip" >> $GITHUB_ENV
          echo "DL_URL=${{github.server_url}}/${{github.repository}}/releases/download" >> $GITHUB_ENV

      # TODO: here we should let the user pick files and folders to add to plugins and resources
      - name: Prepare plugin folders
        run: |
          mkdir plugins resources
          mv *.py *.png kimotor-project plugins
          mv assets/icon.png resources
          zip -r ${{env.PACKAGE_NAME}} plugins resources metadata.json

      - name: Update metadata (package)
        run: |
          tmp=$(mktemp)
          jq '.versions[0].download_url = "${{env.DL_URL}}/${{env.RELEASE_VERSION}}/${{env.PACKAGE_NAME}}"' metadata.json > "$tmp"
          mv "$tmp" metadata.json

      - name: Get statistics
        run: |
          echo "FILE_SHA=$(shasum -a 256 ${{env.PACKAGE_NAME}} | cut -d ' ' -f1)" >> $GITHUB_ENV
          echo "FILE_SIZE=$(wc -c < ${{env.PACKAGE_NAME}})" >> $GITHUB_ENV
          echo "FILE_SIZE_UC=$(unzip -l ${{env.PACKAGE_NAME}} | tail -1 | xargs | cut -d ' ' -f1)" >> $GITHUB_ENV

      - name: Update metadata (metadata repository)
        run: |
          tmp=$(mktemp)
          jq '.versions[0] += {"download_sha256": "${{ env.FILE_SHA }}", "download_size": ${{ env.FILE_SIZE }}, "install_size": ${{ env.FILE_SIZE_UC }} }' metadata.json > "$tmp"
          mv "$tmp" metadata.json


      # Make artifacts available for download (useful during testing)
      #- name: Provision artifacts
      #  uses: actions/upload-artifact@v2
      #  with: 
      #    name: assets-for-download
      #    path: downloads

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{env.PACKAGE_NAME}}
            metadata.json

#      - name: Push metadata to addons register (official repo)
# https://stackoverflow.com/questions/63308904/push-to-gitlab-with-access-token-using-github-actions
# or
# https://cpina.github.io/push-to-another-repository-docs/generic-example.html#generic-example
